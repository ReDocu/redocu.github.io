---
layout: main  
title:  "정보처리기사 - 1. 소프트웨어 설계 - 소프트웨어 개발 방법론 테일러링"
date:   2025-01-02 00:00:00 +0900
categories: 자격증
index : 2
post_layout: true
---

## 목차

<div class="row">
    <div class="col-6 col-12-xsmall">
    <ol>
      <li><a href="#소프트웨어-개발-방법론-테일러링">소프트웨어 개발 방법론 테일러링</a></li>
      <li><a href="#프로젝트-일정-관리">프로젝트 일정 관리</a></li>
      <li><a href="#프로젝트-비용산정-모델">프로젝트 비용산정 모델</a></li>
      <li><a href="#투입-인력-자원-구성">투입 인력 자원 구성</a></li>
      <li><a href="#소프트웨어-품질-관리">소프트웨어 품질 관리</a></li>
      <li><a href="#프로젝트-형상-관리">프로젝트 형상 관리</a></li>
    </ol>
  </div>
</div>

<hr/>


## `소프트웨어 개발 방법론 테일러링`

### 소프트웨어 개발 방법 테일러링
- 개발 방법론 테일러링의 개요
  - 방법론 테일러링 정의
    - 개발 프로젝트의 특성 및 필요에 따라 기존의 소프트웨어 개발 모델을 최적화하는 활동
    - 기존 개발 모델의 절차, 활동, 산출물 등의 가공, 적용, 정제를 반복적으로 수행
  - 방법론 테일러링의 필요성
    - 다양한 유형의 프로젝트를 하나의 정형화된 개발 모델만을 적용하기 어렵다.
    - 개발 모델을 선정하기 위한 내부적, 외부적 요건이 서로 충돌하는 경우가 많다.
  - 방법론 테일러링의 필요 판단 기준
    - 내부적 요건 : 목표 환경, 요구사항, 프로젝트 규모, 보유 기술
    - 외부적 요건 : 법적 제약사항, 표준 품질 기준

### 개발 방법론 테일러링 프로세스
- 프로젝트 일정 및 자원현황 반영
  - 개발 방법론에 프로젝트 일정과 비용, 목표 품질, 투입 자원, 위험관리 요소
- 기반이 되는 개발 모델에 맞춰 개발 단계별 절차 수립
  - 이해관계자들에게 반영된 결과를 설명하여 테일러링을 확정
- 테일러링 완료된 개발 모델에 대한 메뉴얼 작성
  - 확정된 개발 모델의 단계별 활동 목적과 작업 내용, 산출물에 대한 매뉴얼을 작성

### 소프트웨어 개발 프로젝트 개요
- 소프트웨어 개발 프로젝트 정의
  - 미리 계획된 일정과 차원의 범위 안에서 정해진 목표를 달성하기 위한 모든 활동
  - 프로젝트는 업무마다 개발 방법이나 시간이 정해져 있으며 단계적으로 진행
- 소프트웨어 개발 프로젝트 관리 요소
  - 소프트웨어 개발 프로젝트는 인적자원(People), 일정(Process), 문제인식(Problem)을 기반으로 관리
  - 일정 : 활동 순서, 활동 기간 산정, 일정 개발, 일정 통제
  - 비용 : 원가 산정, 예산 편성, 원가 통제
  - 투입 자원 : 팀 편성 및 관리, 자원 산정, 조직 정의, 자원 통제
  - 위험 : 위험 식별, 위험 평가, 위험 대처, 위험 통제
  - 품질 : 품질 계획, 품질 보증 수행, 품질 통제 수행
- 소프트웨어 개발 프로젝트 계획 및 예측
  - 개발 영역과 인력자원, 비용 및 일정등을 고려하여 프로젝트 계획을 수립
  - 프로젝트 진행 중 발생하는 위험요소에 대해서는 예측이 불가능
  - 프로젝트의 규모를 우선적으로 파악하고 프로젝트의 복잡도 등을 파악
  - 프로젝트 비용을 결정하는 요소
    - 프로젝트 요소 : 규모, 신뢰도, 복잡도 등
    - 자원 요소 : 인적 자원, 하드웨어, 소프트웨어 라이선스 등
    - 생산성 요소 : 개발 기간, 개발자의 능력 등

## `프로젝트 일정 관리`

### 프로젝트 일정 관리 원칙
- 관리 가능한 여러 개의 작업 분할
- 분할된 작업들의 의존성에 따라 상호관계 네트워크 설정
- 작업별로 요구되는 시간을 할당
- 개발자에게 적절한 시간을 할당
- 프로젝트 참여 인원은 규모에 따라 프로젝트 시작 전에 결정한다.
  - Brooks의 법칙 : 프로젝트 진행 중에 새로운 인원을 투입할 경우 오히려 일정을 지연시킴

### 프로젝트 일정 계획 방법론
- 프로젝트 일정 계획 방법론 정의
  - 프로젝트 일정을 계획대로 진행할 수 있도록 스케줄을 작성하는 방법론
  - 자원과 비용을 가장 적게 사용하면서, 가장 짦은 시간 내에 완성될 수 있도록 스케줄링
  - 소요 기간의 예측 가능성에 따라 PERT, CPM 등으로 나뉜다.
  - 일정 수립이 목적이며 정확한 프로젝트 진행 비용 산정은 별도로 진행
- PERT(Program Evaluation and Review Technique)
  - 작업별 개발 기간이 불확실하여 개발 기간 내에 전체 프로젝트를 완료할 수 있을지에 대한 확률을 분석할 때 사용하는 방법
  - 프로젝트를 구성하는 각 작업들을 낙관치, 기대치, 비관치로 구성하여 종료 시기를 예측
    - 예측치 = ((낙관치 + 4 X 기대치) + 비관치)/6
  - 노드와 간선을 통해 작업의 완료시점(이벤트)과 해당 작업의 소요시간을 예측하여 표혀ㅑㄴ
    - [1. 프로젝트 시작]      (1,2,3) 2주 (낙관치, 기대치, 비관치)
    - [2. 요구사항 분석 완료] (1,3,5) 3주 -- 
    - [3. HW 설계 완료]     (2,4,6) 4주
    - [4. HW 구현 완료]     (1,2,3) 2주 --
    - [5. SW 개발 완료]     (4,7,10) 7주
    - [6. 통합 구현 완료]    (1,4,7) 7주 --
    - [7. 프로젝트 종료]    (1,1,1) 1주
- CPM(Critical Path Method)
  - 작업별 개발 기간이 확실할 경우에 사용하는 방법으로 임계 경로 기법
  - 계획된 최단 시간으로 전체 프로젝트를 완료하기 위한 주공정 경로와 소요 기간을 계산
    - 원형 노드 : 특정 작업의 완료 시점
    - 박스 노드 : 해당 이정표에 종속된 모든 작업이 완료되어야 다음 작업 진행 가능
  - 임계 경로를 통해 개발 기간을 결정
    - 임계 경로(Critical Path = 주공정) : 작업 소요시간이 가장 오래 걸리는 경로
  - A [B(2주) C(5주) - 이정표(5주) - E(4주) - H(5주) - I]
  - A [D(4주) - 이정표(4주) - F(5주) G(7주) - 이정표(11주) - I]
- 간트 차트(Gantt Chart)
  - 프로젝트 개발 일정을 기능별로 시간의 흐름에 따라 막대 그래프를 사용하여 표현한 일정표
  - 작업 간의 의존성(선후관계) 및 작업의 문제 요인을 파악하기 어려움
  - 상세한 정보를 표현하기 어려워 소규모 활동으로 이루어지는 프로젝트에 적합
    - 일정
    - 작업 1   ====
    - 작업 2       ====
    - 작업 3  ==

## `프로젝트 비용산정 모델`

### 소프트웨어 사업비 종류
- 정보 전략 계획 수립 비용 : 적정성 및 타당성 분석을 통해 프로젝트 계획을 수립하는 업무에 대한 비용
- 소프트웨어 개발 비용 : 소프트웨어 개발에 필요한 인원가 기간, 개발 도구 등에 대한 비용
- 소프트웨어 유지 보수 비용 : 제품 지원, 기술 지원, 사용자 지원 등의 서비스 제공 비용
- 소프트웨어 재개발 비용 : 개발된 소프트웨어의 일부를 다시 개발하는(유지 보수 범위를 초과 하는) 비용
- 데이터베이스 구축 비용 : 소스 데이터를 이용한 친화적 형태로 가공하는 작업에 대한 비용
- 시스템 운영 환경 구축 비용 : 테스트 단계의 시험 환경 및 운영 환경을 설계, 구축하는 비용

### 소프트웨어 비용 산정
- 소프트웨어 비용 산정 정의
  - 소프트웨어 개발에 필요한 여러 가지 프로젝트 관리 요소를 기반으로 소프트웨어 프로젝트의 규모를 파악하여 개발에 필요한 비용을 미리 산정하는 활동
  - 비용이 너무 낮으면 개발자들의 부담이 커지고 곧 품질의 저하로 이어지므로 적정선을 잘 선정해야 한다.
  - 대표적으로 하향식, 상향식 기법으로 나뉜다.
- 소프트웨어 비용 결정 요소
  - 프로젝트 : 제품 복잡도, 시스템 크기, 요구 신뢰도
  - 자원 : 인적자원, 하드웨어 자원, 소프트웨어 자원
  - 생산성 : 개발자 역량(지식, 경험, 이해도 등), 개발 기간

### 하향식 비용 산정 기법
- 과거의 수한 개발 경험을 기반으로 산정하는 비 과학적인 기법
- 소프트웨어의 전체 비용을 산정한 뒤 각 기능(작업)별로 세분화한다.
- 전문가 측정 기법
  - 경험이 있는 둘 이상의 전문가들이 신속하게 비용을 산정하는 것이다.
  - 개인적이고 주관적인 판단이 포함될 가능성이 높다.
- 델파이 측정 기법
  - 전문가 측정 기법의 단점을 보완한 기법으로 조정자가 여러 전문가의 의견을 종합하여 비용을 산정한다.
  - 전문가들은 측정 비용을 조정자에게 익명으로 제출하고 조정자는 서로 의견을 공유하고 조율하는 과정을 통해 어느 정도 일치되는 비용이 도출되면 개발 비용으로 선정

### 상향식 비용 산정 기법
- 프로젝트의 세부적인 작업 단위별로 비용을 산정한 뒤 전체 비,용을 산정하는 방식
- LOC(Line Of Code)
  - 각 기능의 소스 코드 라인 수의 비관치, 낙관치, 기대치를 통해 예측치를 계산하고 이를 기반으로 비용을 산정하는 기법
    - 낙관치 : 가장 적은 예측 라인 수
    - 기대치 : 평균적인 예측 라인 수
    - 비관치 : 가장 많은 예측 라인 수
    - 예측치 = (낙관치 + (4 X 기대치) + 비관치)/6
  - 측정이 용이하고 이해하기 쉬워서 많이 사용된다.
  - LOC 기반 비용 산정 공식은 아래와 같다.
    - 노력 = 개발 기간 X 투입 인원 = LOC/인당 월평균 생산 코드 라인
    - 개발 비용 = 노력 X 월 평균 인건비
    - 개발 기간 = LOC/(인당 월평균 생산 코드 라인/투입 인원)
    - 생산성 = LOC/노력
- 단계별 노력(Effort Per Task) 기법
  - 단순 코드 라인수만으로 측정하는 LOC기법을 보완하는 기법
  - 각 기능들을 구현시키는 데 필요한 노력에 가중치를 별도 반영하여 측정

### 수학적 산정 기법
- COCOMO(COnstructive COst MOdel)
  - 보헴(Boehm)이 제안한 LOC 기반 비용 산정 기법으로 비용 산정에 널리 통용된다.
    - Organic(조직형) : 5만 라인(50KDSI) 이하의 사무처리, 업무용, 과학용, 응용 소프트웨어
    - Semi-Detached(반분리형) : 30만 라인(300KDSI) 이하의 운영체제, DBMS, 트랜잭션 처리 시스템
    - Embedded(내장형) : 30만 라인(300KDSI) 이상의 초대형 규모의 시스템 소프트웨어
    `KDSI : 소스 코드를 1000 단위로 표현`
  - COCOMO는 보다 상세하고 정확한 Basic, Intermediate, Detailed 모델로 구분될 수 있다.
- Putnam
  - Putnam이 제안한 비용 산정 기법으로 시간에 따른 함수로 표현되는 Ray-Leigh-Norden 곡선의 노력 분포도에 기반한다.
  - 소프트웨어 생명 주기의 전 과정 동안에 사용될 노력의 분포를 예측해주는 기법
  - 생명 주기 예측 모형이라고도 불리며 대형 프로젝트의 노력 분포 산정에 이용된다.
  - 개발 기간이 늘어날 수록 프로젝트 적용 인원의 노력이 감소한다.
  - 자동화 비용 측정 도구로 SLIM이 있다.
- 기능 점수(Function Point) 기법
  - 알브레히트가 제안한 기법으로 소프트웨어 기능을 증대시키는 요인(비용 산정 요인)별로 가중치를 부여하여 비용을 산정한다.
    - 기능 증대 요인 : 입력, 출력, 사용자 질의, 데이터 파일, 인터페이스 등
  - 요인별 가중치를 합산하여 총 기능점수를 산출하고 이를 이용하여 비용을 산정한다.
  - 자동화 비용 측정 도구로 ESTIMACS가 있다.
    - 데이터 기능 : 내부 논리 파일 X 내부논리파일 복잡도 가중치 = 내부논리파일 기능점수 
    - 데이터 기능 : 외부 연계 파일 X 외부연계파일 복잡도 가중치 = 외부연계파일 기능점수
    - 트랜잭션 기능 : 외부 입력 X 외부입력 복잡도 가중치 = 외부입력 기능점수
    - 트랜잭션 기능 : 외부 출력 X 외부출력 복잡도 가중치 = 외부출력 기능점수
    - 트랜잭션 기능 : 외부 조회 X 외부조회 복잡도 가중치 = 외부조회 기능점수

## `투입 인력 자원 구성`

### 중앙 집중형 팀 구성 - 책임 프로그래머 팀
- 1인 책임 프로그래머를 위해 다수가 보조 역할을 담당하는 성형 구조
- 소규모 소프트웨어를 단기적으로 개발하는 데 적합한 구조
- 기능 구현의 분담이 필요 없는 단순한 난이도의 프로젝트에 적합
- 대부분의 개발 팀원들의 만족도가 낮고 이직률이 높다.

### 분산형 팀 구성 - 민주주의식 팀
- 개개인의 담당 개발 영역이 독립적으로 존재하는 링형 구조
- 대규모 소프트웨어를 장기적으로 개발하는 데 적합한 구조
- 기능 구현의 분담을 통해 복잡한 난이도의 프로젝트에 적합
- 대부분의 개발 팀원들의 만족도가 높고 이직률이 낮다.

## `소프트웨어 품질 관리`

### 소프트웨어 개발 표준
- ISO/IEC 12207
  - 국제표준화기구(ISO)에서 제정한 표준 소프트웨어 수명 주기 프로세스
  - 기본 생명 주기 프로세스 : 획득, 공급, 개발, 운영, 유지보수
  - 지원 생명 주기 프로세스 : 문서화, 형상 관리, 문제 해결, 품질 보증, 검증, 확인, 합동 검토, 감리
  - 조직 생명 주기 프로세스 : 관리, 기반 구조, 개선, 교육 훈련
- ISO/IEC 12119
  - 패키지 소프트웨어의 제품 품질 요구사항 및 테스트를 위한 국제 표준
- ISO/IEC 29119
  - 소프트웨어 테스트를 위한 국제 표준
- ISO/IEC 9126(25010)
  - 소프트웨어 품질 특성 및 평가에 관한 표준으로, 2011년에 호환성과 보안성을 강황하여 25010으로 개정
  - 6가지 외부 품질 특성을 정의하고 있으며, 각 특성에는 세분화된 21가지 내부 평가 항목을 정의한다.
  - 품질의 측정과 관리에는 다양한 표준 측정 메트릭을 활용하도록 제시
    - 기능성(Functionality) : 명시된 요구사항을 만족하는 기능 / 적합성, 상호운용성, 보안성, 정확성, 준수성
    - 신뢰성(Reliability) : 정의된 성능 수준을 유지하는 능력 / 고장 허용성, 회복성, 성숙도, 준수성
    - 사용성(Usability) : 사용자에 의해 이해, 학습, 사용, 선호되는 능력 / 학습성, 운영성, 이해도, 친밀성, 준수성
    - 효율성(Efficiency) : 사용되는 자원에 따라 요구 성능을 제공하는 능력 / 반응 시간, 지원 특성, 준수성
    - 유지보수성(Maintainability) : 제품이 수정, 개선, 개작될 수 있는 능력 / 분석성, 변경성, 안정성, 테스트 용이성, 준수성
    - 이식성(Portability) : 서로 다른 환경으로 이식될 수 있는 능력 / 적용성, 설치성, 공존성, 교체성, 준수성

### CMM(Capability Maturity Model)







## `프로젝트 형상 관리`


