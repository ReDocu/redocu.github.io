---
layout: main  
title:  "정보처리기사 - 1. 소프트웨어 설계 - 소프트웨어 개발 방법론"
date:   2025-01-01 00:00:00 +0900
categories: 자격증
index : 1
post_layout: true
---

## 목차

<div class="row">
    <div class="col-6 col-12-xsmall">
    <ol>
      <li><a href="#소프트웨어-개요">소프트웨어 개요</a></li>
      <li><a href="#소프트웨어-개발-생명-주기">소프트웨어 개발 생명 주기</a></li>
      <li><a href="#소프트웨어-개발-방법론">소프트웨어 개발 방법론</a></li>
    </ol>
  </div>
</div>

<hr/>

## `소프트웨어 개요`

### 상용 소프트웨어
- 상용 소프트웨어 특징
  - 상업적 목적이나 판매를 목적으로 개발하는 소프트웨어이다.
  - 소프트웨어 개발에 사용된 소스 코드는 배포하지 않는다.
  - 다양한 형태의 라이선스를 이용하여 배포되며 기술 지원을 보증한다.
- 상용 소프트웨어 분류 체계
  - 산업 범용 소프트웨어 : 시스템 SW, 미들 웨어, 응용 SW 등
  - 산업 특화 소프트웨어 : 자동차, 항공, 교육, 물류 등의 산업 전용

### 응용 소프트웨어
- 응용 소프트웨어 특징
  - 특정 업무를 처리하기 위한 목적으로 작성된 소프트웨어이다.
  - 애플리케이션, 응용 솔루션 및 서비스 등 다양한 이름으로 불린다.
- 응용 소프트웨어 분류 체계
  - 기업용 소프트웨어 
    - 오피스웨어 : 워드, 엑셀, 그룹웨어 등의 일반 업무용
    - ERP : 경영 활동 프로세스 통합 관리
    - SCM : 물류의 흐름 파악 및 지원
    - BI : 데이터를 활용하여 의사 결정 지원
    - CRM : 고객 특성에 맞는 마케팅 활동 지원
  - 영상 처리 소프트웨어 : 영상 인식, 스트리밍, 영상 편집 등
  - CG/VR 소프트웨어 : 3D 스캐닝과 프린팅, 모델링, 가상현실, 홀로그램 등
  - 콘텐츠 배포 소프트웨어 : 콘텐츠 보호, 관리, 유통 등
  - 자연어 처리 소프트웨어 : 정보 검색과 질의 응답, 의사 결정 지원, 언어 분석 등
  - 음성 처리 소프트웨어 : 음성 인식, 합성 처리 등

### 시스템 소프트웨어
- 시스템 소프트웨어의 정의
  - 사용자가 손쉽고 효율적으로 컴퓨터 시스템을 사용하도록 돕는 소프트웨어
  - 일반적으로 하드웨어 제작사에게 제공되며 운영체제와도 같은 의미를 가짐
- 시스템 정의
  - 컴퓨터 시스템과 같은 의미로 쓰이며, 특정 업무를 수행하기 위해 중앙 처리 장치를 중심으로 구성된 하드웨어 및 소프트웨어의 총칭
  - 입력(Input) : 시스템 처리가 필요한 데이터, 제어 요소 등을 전달
  - 처리(Process) : 입력된 값을 정해진 방식에 맞게 처리하여 결과를 도출
  - 출력(Output) : 처리 결과를 출력 장치(모니터, 프린터 등) 및 저장 장치로 전달
  - 제어(Control) : 데이터 처리를 위해 각 장치들의 기능 수행을 제어
  - 피드백(Feedback) : 기능 수행이 잘못된 경우 적절한 처리과정을 다시 반복
- 시스템의 성능평가 기준
  - 처리능력(Throughput) : 단위 시간 내 작업 처리량
  - 반환 시간(Turnaround Time) : 작업 의뢰부터 처리까지 시간
  - 사용 가능도(Availability) : 필요할 때 즉시 사용 가능한 정도(가용성)
  - 신뢰도(Reliability) : 주어진 문제를 정확하게 해결하는 정도
- 플랫폼
  - 특정 시스템을 바탕으로 제공되는 운영체제 및 운영환경을 뜻한다.
  - 플랫폼의 성능을 측정하는 기준
    - 가용성(Avilability) : 필요할 때 즉시 사용 가능한 정도 (사용 가능도)
    - 응답 시간(Response Time) : 명령에 반응하는 시간
    - 정확성(Accuracy) : 처리 결과가 기대한 값과 비교해서 정확한지 측정
    - 사용률(Utilization) : 데이터 처리에 시스템 자원을 사용하는 정도

### 소프트웨어 공학
  - 소프트웨어 공학 정의
    - 최소의 비용과 개발 기간을 통해 높은 품질의 소프트웨어를 도출하기 위한 모든 수단과 도구들의 총칭이다.
    - 소프트웨어 개발의 품질과 생산성의 향상을 목표로 연구하는 학문.
    - 소프트웨어 공학의 목적
      - 소프트웨어 개발에 필요한 비용과 기간의 예측
      - 하드웨어에 대한 소프트웨어의 상대적 비용 절감
      - 급속하게 발전하는 하드웨어, 소프트웨어 기술 반영
  - 소프트웨어 공학의 기본 원칙
    - 현대적인 프로그래밍 기술을 지속적으로 적용
    - 소프트웨어 품질에 대해 지속적인 검증을 시행
    - 소프트웨어 개발 단계별 산출물에 대한 명확한 기록을 유지

### 소프트웨어 개발 프레임워크
  - 모듈(Module)
    - 프로그램을 기능별로 분할하여 재사용이 가능하게끔 부품화한 것
    - 개발자가 프로그램의 기본 틀을 제공하고, 모듈을 활용하여 기능을 구체화
  - 라이브러리(Library)
    - 툴킷이라고도 하며, 관련 있는 모듈들을 모아놓은 것
    - 라이브러리에 존재하는 각 모듈이 반드시 독립적인 것은 아님.
      - 표준 라이브러리 : 프로그래밍 언어에 내장
      - 외부 라이브러리 : 별도의 설치를 통해 사용 가능
  - 디자인 패턴(Design Pattern)
    - 특정 기능에 대한 문제해결을 위한 추상적인 가이드라인
    - 프로그램의 세부적인 구현 방안을 위해 참조하는 해결 방식을 제시
  - 소프트웨어 개발 프레임워크(FrameWork)
    - 디자인 패턴에 모듈의 장점 및 기능을 결합하여 실제적인 개발의 틀을 제공
    - 프레임워크가 프로그램의 기본 틀을 제공하고, 개발자가 기능을 구체화하는 제어의 역 흐름이 발생
    - 프로그램의 기반, 구조를 잡아주는 코드의 모임, 자연스럽게 특정 디자인 패턴을 유도
    - 이미 검증된 프레임워크를 사용함으로써 품질, 예산, 유지보수에 이점
    - 프로그램 구성의 복잡도가 감소하여 상호 운영성과 개발 및 변경에 용이
  - 소프트웨어 아키텍처(Architecture)
    - 다수의 프레임워크를 체계적으로 구성, 설명하는 구조체
    - 소프트웨어의 설계와 업그레이드를 통제하는 지침과 원칙
  - 컴포넌트(Component)
    - 모듈의 형태로 재사용 가능한 확장된 소프트웨어 블럭
    - 일반적인 코딩을 벗어나 마치 레고를 쌓아 올리듯 개발하는 기법
    - 프레임워크 및 아키텍처가 적용되어 안정적
    - 협약에 의한 설계를 따를 경우 포함되어야 할 조건
      - 선행조건 : 컴포넌트 오퍼레이션 사용 전에 참이어야 하는 조건
      - 결과조건 : 컴포넌트 오퍼레이션 사용 후에 참이어야 하는 조건
      - 불변조건 : 컴포넌트 오퍼레이션 실행 중에 참이어야 하는 조건
  - 재사용 가능한 소프트웨어 요소
    - 소프트웨어의 부분 또는 전체 영역을 모두 재사용 요소로 볼 수 있다.
    - 부분적인 코드 뿐 아니라 응용된 지식과 데이터 구조도 재사용 가능한 요소에 포함
    - 개발 이후의 테스트 계획, 문서화 방법 및 절차 등도 재사용 가능 요소
  - 소프트웨어 재사용 방법
    - 합성 중심(Composition) : 모듈을 조립하여 소프트웨어를 완성시키는 블록 구조 방식
    - 생성 중심(Generation) : 추상적인 명세를 구체화하여 소프트웨어를 완성

## `소프트웨어 개발 생명 주기`

## `소프트웨어 개발 방법론`

## `소프트웨어 개발 방법론 테일러링`