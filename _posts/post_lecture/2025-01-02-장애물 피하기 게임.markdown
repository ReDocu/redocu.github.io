---
layout: main  
title:  "[Unity - 1]장애물 피하기에 필요한 코드"
date:   2025-01-02 00:00:00 +0900
categories: 학습내역
index : 2
post_layout: true
---

캐릭터 움직이기

- Main Camera
- CinemachineCamera [Inspector]

- 장애물 명칭
- 충돌 체크 종류
- 충돌 Materials 세팅하기

- 시간 지나면 장애물 떨어뜨리기 [GetComponent] / RigidBody 코드로 설정하기
- Score [점수 (캐릭터가 기억하도록 세팅하기)]
- 표적 플레이어를 향해 날아오기 [발사체]
- 기믹으로 Trigger에 닿으면, 표적 날라오기 [발사체 코드]
- 장애물 회전

## 캐릭터 움직이기
**캐릭터 움직임 코드**

```csharp
using UnityEngine;

public class Mover : MonoBehaviour
{
    [SerializeField] private float moveSpeed = 10f;

    // Update is called once per frame
    void Update()
    {
        // Time.deltaTime
        // 프레임이 바뀔 때 마다 시간을 측정한 값
        
        float xValue = Input.GetAxis("Horizontal") * Time.deltaTime * moveSpeed;
        float yValue = 0f;
        float zValue = Input.GetAxis("Vertical") * Time.deltaTime * moveSpeed;

        transform.Translate(xValue, yValue, zValue);
    }
}
```

---

## 시네머신을 이용한 메인 카메라

**Main Camera**
  Cinemachine Brain
  
**CinemachineCamera [Inspector]**
  
  Tracking Target
  
  Procedural Components
  
  - Position Control
  - Rotation Control
  
  설정시 Chnemachine Follow 설정
  
  설정시 Cinemachine Hard Look At 설정
  
  Damping 을 통해 움직임에 대한 딜레이 가능
  

## 충돌 체크

---

**장애물 명칭**
  
  Obstacle : 장애물
  
  Environment 로 레벨링 정리
  
**충돌 체크 종류**
  
  RigidBody와
  
  BoxCollider
  
  Trigger [Mesh Renderer]를 해제- Gimmick에 주로 사용
  
**충돌 Materials 세팅하기**
  
  ```csharp
  using UnityEngine;
  
  public class ObjectHit : MonoBehaviour
  {
      private void OnCollisionEnter(Collision other) 
      {
          if (other.gameObject.tag == "Player")
          {
              GetComponent<MeshRenderer>().material.color = Color.black;
              gameObject.tag = "Hit";
          }
      }
  }
  
  ```
  
 장애물
-
**시간 지나면 장애물 떨어뜨리기 [GetComponent] / RigidBody 코드로 설정하기**
  
  ```csharp
  using UnityEngine;
  
  public class Dropper : MonoBehaviour
  {
      [SerializeField] float timeToWait = 2f;
  
      MeshRenderer myMeshRenderer;
      Rigidbody myRigidBody;
  
      void Start()
      {
          myMeshRenderer = GetComponent<MeshRenderer>();
          myRigidBody = GetComponent<Rigidbody>();
  
          myMeshRenderer.enabled = false;
          myRigidBody.useGravity = false;
      }
  
      void Update()
      {
          if (Time.time > timeToWait)
          {
              myMeshRenderer.enabled = true;
              myRigidBody.useGravity = true;
          }
      }
  }
  ```
  
**Score [점수 (캐릭터가 기억하도록 세팅하기)]**
  
  ```csharp
  using UnityEngine;
  
  public class Scorer : MonoBehaviour
  {
      int hits = 0;
  
      private void OnCollisionEnter(Collision other) 
      {
          if (other.gameObject.tag != "Hit")
          {
              hits++;
              Debug.Log("You've bumped into a thing this many times: " + hits);
          }        
      }
  }
  
  ```
  
**표적 플레이어를 향해 날아오기 [발사체]**
  
  ```csharp
  using UnityEngine;
  
  public class FlyAtPlayer : MonoBehaviour
  {
      [SerializeField] float speed = 1.0f;
      [SerializeField] Transform player;
      Vector3 playerPosition;
      
      void Awake() 
      {
          gameObject.SetActive(false);
      }
      
      void Start()
      {
          playerPosition = player.transform.position;
      }
  
      void Update()
      {
          MoveToPlayer();
          DestroyWhenReached();
      }
  
      void MoveToPlayer()
      {
          transform.position = 
          Vector3.MoveTowards(transform.position, playerPosition, Time.deltaTime*speed);
      }
  
      void DestroyWhenReached()
      {
          if (transform.position == playerPosition)
          {
              Destroy(gameObject);
          }
      }
  }
  
  ```
  
**기믹으로 Trigger에 닿으면, 표적 날라오기 [발사체 코드]**
  
  ```csharp
  using UnityEngine;
  
  public class TriggerProjectile : MonoBehaviour
  {
      [SerializeField] GameObject projectile1;
      [SerializeField] GameObject projectile2;
      [SerializeField] GameObject projectile3;
      [SerializeField] GameObject projectile4;
      [SerializeField] GameObject projectile5;
      
      private void OnTriggerEnter(Collider other) 
      {
          if(other.gameObject.tag == "Player")
          {
              projectile1.SetActive(true);
              projectile2.SetActive(true);
              projectile3.SetActive(true);
              projectile4.SetActive(true);
              projectile5.SetActive(true);
              Destroy(gameObject);
          }    
      }
  }
  
  ```
  
**장애물 회전**
  
  ```jsx
  using UnityEngine;
  
  public class Spinner : MonoBehaviour
  {
      [SerializeField] float xAngle = 0f;
      [SerializeField] float yAngle = 0f;
      [SerializeField] float zAngle = 0f;
      
      void Start()
      {
          
      }
  
      void Update()
      {
          transform.Rotate(xAngle, yAngle, zAngle);
      }
  }
  
  ```